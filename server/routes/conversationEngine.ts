import { Router } from 'express';
import type { Request, Response, NextFunction } from 'express';
import crypto from 'crypto';
import { Message } from '../models/Message.js';
import { Contact } from '../models/Contact.js';
import { User } from '../models/User.js';
import VendorLocation from '../models/VendorLocation.js';
import { sendTemplateMessage, sendTextMessage, sendInteractiveMessage, processWebhook } from '../meta.js';
import { checkMessageIdempotency, markMessageIdempotency, initializeRedis } from '../utils/idempotency.js';

// Extend Request interface to include rawBody
interface RequestWithRawBody extends Request {
  rawBody?: string;
}

const router = Router();

// Initialize Redis for idempotency
initializeRedis().catch(console.error);

// Middleware to capture raw body for signature verification
router.use((req: RequestWithRawBody, res, next) => {
  if (req.method === 'POST') {
    let data = '';
    req.setEncoding('utf8');
    req.on('data', (chunk) => {
      data += chunk;
    });
    req.on('end', () => {
      req.rawBody = data;
      try {
        req.body = JSON.parse(data);
      } catch (e) {
        req.body = {};
      }
      next();
    });
  } else {
    next();
  }
});

/**
 * POST: Conversation engine webhook consumer
 * Receives forwarded events from the router and processes them
 */
router.post('/', async (req: RequestWithRawBody, res: Response) => {
  try {
    // Verify relay signature (optional but recommended)
    const relaySig = req.header('X-Relay-Signature');
    const expectedSecret = process.env.RELAY_SECRET;
    
    if (expectedSecret && relaySig && req.rawBody) {
      const expected = "sha256=" + crypto.createHmac("sha256", expectedSecret)
        .update(req.rawBody)
        .digest("hex");
      
      if (!crypto.timingSafeEqual(Buffer.from(relaySig), Buffer.from(expected))) {
        console.log('‚ùå Invalid relay signature');
        return res.status(403).json({ error: 'Unauthorized' });
      }
    }
    
    console.log('üì® Conversation engine received webhook:', JSON.stringify(req.body, null, 2));
    
    // ACK immediately
    res.status(200).send('OK');
    
    const value = req.body?.entry?.[0]?.changes?.[0]?.value || {};
    
    // Process messages
    const messages = value?.messages || [];
    for (const message of messages) {
      await handleInboundMessage(message);
    }
    
    // Process statuses
    const statuses = value?.statuses || [];
    for (const status of statuses) {
      await handleMessageStatus(status);
    }
    
  } catch (error) {
    console.error('‚ùå Error in conversation engine:', error);
    if (!res.headersSent) {
      res.status(500).json({ error: 'Internal server error' });
    }
  }
});

/**
 * Handle inbound messages with idempotency
 */
async function handleInboundMessage(message: any) {
  const messageId = message.id;
  
  // Check idempotency using Redis + fallback
  if (await checkMessageIdempotency(messageId)) {
    console.log(`‚ö†Ô∏è Message ${messageId} already processed, skipping duplicate`);
    return;
  }
  
  // Mark as processed
  await markMessageIdempotency(messageId, 24); // 24 hours TTL
  
  try {
    const { from, timestamp, type, text, interactive, button, context } = message;
    
    console.log(`üì® Processing inbound message from ${from}: ${text || '[interactive]'}`);
    
    // Save message to database
    const messageData = {
      from: from,
      to: process.env.META_PHONE_NUMBER_ID,
      body: text || '[interactive message]',
      direction: 'inbound',
      timestamp: new Date(parseInt(timestamp) * 1000),
      meta: {
        messageId: messageId,
        type: type,
        interactive: interactive,
        button: button,
        context: context
      }
    };

    const savedMessage = new Message(messageData);
    await savedMessage.save();
    console.log('‚úÖ Saved inbound message:', savedMessage._id);

    // Update contact
    await Contact.findOneAndUpdate(
      { phone: from },
      {
        phone: from,
        lastSeen: new Date(),
        updatedAt: new Date()
      },
      {
        upsert: true,
        new: true,
        setDefaultsOnInsert: true
      }
    );

    // Route to appropriate conversation handler
    if (type === 'text' && text) {
      await handleTextConversation(from, text);
    } else if (type === 'interactive' && button) {
      await handleButtonConversation(from, button);
    } else if (type === 'location') {
      await handleLocationConversation(from, message);
    }
    
  } catch (error) {
    console.error('‚ùå Error handling inbound message:', error);
  }
}

/**
 * Handle text-based conversations
 */
async function handleTextConversation(from: string, text: string) {
  const normalizedText = text.trim().toLowerCase();
  
  // Support conversation flow
  if (await isSupportConversation(from, normalizedText)) {
    await handleSupportConversation(from, normalizedText);
    return;
  }
  
  // Loan conversation flow
  if (await isLoanConversation(from, normalizedText)) {
    await handleLoanConversation(from, normalizedText);
    return;
  }
  
  // Verification conversation flow
  if (await isVerificationConversation(from, normalizedText)) {
    await handleVerificationConversation(from, normalizedText);
    return;
  }
  
  // Onboarding conversation flow
  if (await isOnboardingConversation(from, normalizedText)) {
    await handleOnboardingConversation(from, normalizedText);
    return;
  }
  
  // Default greeting handler
  if (/^(hi+|hello+|hey+)$/.test(normalizedText)) {
    await handleGreetingConversation(from);
    return;
  }
  
  // Fallback: log unknown message
  console.log(`‚ùì Unknown message from ${from}: ${text}`);
}

/**
 * Handle button-based conversations
 */
async function handleButtonConversation(from: string, button: any) {
  const { id, title } = button;
  
  console.log(`üîò Button conversation: ${id} - ${title}`);
  
  if (id === 'yes_verify_aadhar' || title === 'Yes, I will verify Aadhar') {
    await handleAadhaarVerificationButton(from);
  } else if (id === 'yes_support') {
    await handleSupportRequestButton(from);
  } else {
    console.log(`‚ùì Unknown button: ${id}`);
  }
}

/**
 * Handle location-based conversations
 */
async function handleLocationConversation(from: string, message: any) {
  try {
    const location = message.location;
    if (location) {
      const coordinates = {
        latitude: location.latitude,
        longitude: location.longitude
      };
      
      console.log('üìç Location conversation:', coordinates);
      
      // Update user's location
      const userNumbers = [from];
      if (from.startsWith('+91')) userNumbers.push(from.replace('+91', '91'));
      if (from.startsWith('+')) userNumbers.push(from.substring(1));
      userNumbers.push(from.slice(-10));
      
      const users = await User.find({ contactNumber: { $in: userNumbers } });
      for (const user of users) {
        user.location = {
          type: 'Point',
          coordinates: [coordinates.longitude, coordinates.latitude],
        };
        user.mapsLink = `https://maps.google.com/?q=${coordinates.latitude},${coordinates.longitude}`;
        await user.save();
        console.log(`‚úÖ Updated user location for ${user.contactNumber}`);
      }
      
      // Update VendorLocation collection
      try {
        let vendorLocation = await VendorLocation.findOne({ phone: from });
        
        if (vendorLocation) {
          vendorLocation.location = {
            lat: coordinates.latitude,
            lng: coordinates.longitude
          };
          vendorLocation.updatedAt = new Date();
          await vendorLocation.save();
          console.log(`‚úÖ Updated VendorLocation for ${from}`);
        } else {
          vendorLocation = new VendorLocation({
            phone: from,
            location: {
              lat: coordinates.latitude,
              lng: coordinates.longitude
            }
          });
          await vendorLocation.save();
          console.log(`‚úÖ Created new VendorLocation for ${from}`);
        }
      } catch (vendorLocationErr) {
        console.error('‚ùå Failed to update VendorLocation:', vendorLocationErr);
      }
      
      // Send location confirmation
      await sendLocationConfirmation(from);
    }
  } catch (error) {
    console.error('‚ùå Failed to handle location conversation:', error);
  }
}

/**
 * Handle message status updates for analytics
 */
async function handleMessageStatus(status: any) {
  try {
    console.log('üìä Message status update:', status);
    
    // Log status for analytics
    const statusData = {
      messageId: status.id,
      status: status.status,
      timestamp: new Date(parseInt(status.timestamp) * 1000),
      recipientId: status.recipient_id,
      conversationId: status.conversation?.id,
      pricing: status.pricing
    };
    
    // You can save this to a separate status collection for analytics
    console.log('üìà Status logged for analytics:', statusData);
    
  } catch (error) {
    console.error('‚ùå Failed to process message status:', error);
  }
}

// Idempotency functions are now handled by the Redis utility

// Conversation flow handlers
async function isSupportConversation(from: string, text: string): Promise<boolean> {
  return text === 'yes' || text === '‡§π‡§æ‡§Å' || text === '‡§π‡§æ‡§Ç' || text.includes('support');
}

async function isLoanConversation(from: string, text: string): Promise<boolean> {
  return /\bloan\b/i.test(text);
}

async function isVerificationConversation(from: string, text: string): Promise<boolean> {
  return /\b(?:yes|‡§π‡§æ‡§Å|‡§π‡§æ‡§Ç).*?(?:verify|‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§).*?(?:aadhaar|aadhar|‡§Ü‡§ß‡§æ‡§∞)\b/i.test(text);
}

async function isOnboardingConversation(from: string, text: string): Promise<boolean> {
  return text.includes('onboard') || text.includes('register') || text.includes('signup');
}

async function handleSupportConversation(from: string, text: string) {
  console.log('üìû Handling support conversation');
  
  try {
    // Check if this vendor recently received a support call reminder
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    const recentSupportReminder = await Message.findOne({
      to: from,
      direction: 'outbound',
      body: { $regex: /inactive_vendors_support_prompt/ },
      timestamp: { $gte: oneHourAgo }
    });
    
    if (recentSupportReminder) {
      console.log('‚úÖ Found recent support call reminder, processing "yes" response');
      
      // Find vendor details
      const userNumbers = [from];
      if (from.startsWith('+91')) userNumbers.push(from.replace('+91', '91'));
      if (from.startsWith('+')) userNumbers.push(from.substring(1));
      userNumbers.push(from.slice(-10));
      
      const vendor = await User.findOne({ contactNumber: { $in: userNumbers } });
      const vendorName = vendor ? vendor.name : 'Unknown Vendor';
      
      // Check if support call already exists for this vendor in the last hour
      const SupportCallLog = (await import('../models/SupportCallLog.js')).default;
      const existingSupportCall = await SupportCallLog.findOne({
        contactNumber: from,
        timestamp: { $gte: oneHourAgo }
      });
      
      if (!existingSupportCall) {
        // Create support call log entry
        await SupportCallLog.create({
          vendorName: vendorName,
          contactNumber: from,
          timestamp: new Date(),
          completed: false
        });
        
        console.log(`‚úÖ Created support call log for ${vendorName} (${from}) via text response`);
        
        // Send confirmation message
        await sendTemplateMessage(from, 'inactive_vendors_reply_to_yes_support_call');
        
        // Save the confirmation message to database
        await Message.create({
          from: process.env.META_PHONE_NUMBER_ID,
          to: from,
          body: "‚úÖ Support request received! Our team will contact you soon.",
          direction: 'outbound',
          timestamp: new Date(),
          meta: {
            type: 'support_confirmation',
            vendorName: vendorName,
            contactNumber: from,
            trigger: 'text_response'
          }
        });
      } else {
        console.log(`‚ÑπÔ∏è Support call already exists for ${from} within last hour`);
      }
    } else {
      console.log('‚ÑπÔ∏è No recent support call reminder found for this "yes" response');
    }
  } catch (err) {
    console.error('‚ùå Error handling support conversation:', err);
  }
}

async function handleLoanConversation(from: string, text: string) {
  console.log('üí∞ Handling loan conversation');
  
  try {
    // Log the loan reply
    const userNumbers = [from];
    if (from.startsWith('+91')) userNumbers.push(from.replace('+91', '91'));
    if (from.startsWith('+')) userNumbers.push(from.substring(1));
    userNumbers.push(from.slice(-10));
    
    // Find user/vendor name
    let vendorName = '';
    const user = await User.findOne({ contactNumber: { $in: userNumbers } });
    if (user && user.name) {
      vendorName = user.name;
    }
    
    // Check if already logged for this contactNumber and timestamp (within 1 minute)
    const oneMinuteAgo = new Date(Date.now() - 60 * 1000);
    const LoanReplyLogModel = (await import('../models/LoanReplyLog.js')).default;
    const existingLog = await LoanReplyLogModel.findOne({
      contactNumber: from,
      timestamp: { $gte: oneMinuteAgo }
    });
    
    if (!existingLog) {
      await LoanReplyLogModel.create({
        vendorName: vendorName || 'Unknown',
        contactNumber: from,
        timestamp: new Date(),
        aadharVerified: (user as any)?.aadharVerified ? true : false
      });
      console.log(`‚úÖ Logged loan reply from ${vendorName || 'Unknown'} (${from})`);
    }
    
    // Send loan template with Aadhaar verification button
    await sendTemplateMessage(from, 'reply_to_default_hi_loan_ready_to_verify_aadhar_or_not');
    
    // Save the outbound message to database
    await Message.create({
      from: process.env.META_PHONE_NUMBER_ID,
      to: from,
      body: "Certainly! ‚úÖ ‡§ú‡§º‡§∞‡•Ç‡§∞ !\n\nWe're here to help you with loan support. To proceed, we need to verify your Aadhaar details.\n‡§π‡§Æ ‡§Ü‡§™‡§ï‡•Ä ‡§≤‡•ã‡§® ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Å ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§ó‡•á ‡§¨‡§¢‡§º‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§π‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§ï‡•Ä ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§ï‡§∞‡§®‡•Ä ‡§π‡•ã‡§ó‡•Ä‡•§\n\nPlease click the button below to confirm your Aadhaar verification:\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§® ‡§ï‡•Ä ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§ó‡§è ‡§¨‡§ü‡§® ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç:",
      direction: 'outbound',
      timestamp: new Date(),
      meta: {
        type: 'loan_response',
        template: 'reply_to_default_hi_loan_ready_to_verify_aadhar_or_not'
      }
    });
    
  } catch (err) {
    console.error('‚ùå Error handling loan conversation:', err);
  }
}

async function handleVerificationConversation(from: string, text: string) {
  console.log('üîê Handling verification conversation');
  
  try {
    // Update vendor's Aadhaar verification status
    const userNumbers = [from];
    if (from.startsWith('+91')) userNumbers.push(from.replace('+91', '91'));
    if (from.startsWith('+')) userNumbers.push(from.substring(1));
    userNumbers.push(from.slice(-10));
    
    // Find user/vendor
    const user = await User.findOne({ contactNumber: { $in: userNumbers } });
    if (user) {
      // Update Aadhaar verification status
      (user as any).aadharVerified = true;
      (user as any).aadharVerificationDate = new Date();
      await user.save();
      console.log(`‚úÖ Updated Aadhaar verification status for ${user.name} (${from})`);
      
      // Update LoanReplyLog entry to show Aadhaar verification
      try {
        const LoanReplyLogModel = (await import('../models/LoanReplyLog.js')).default;
        await LoanReplyLogModel.findOneAndUpdate(
          { contactNumber: from },
          { aadharVerified: true },
          { new: true }
        );
        console.log(`‚úÖ Updated LoanReplyLog Aadhaar verification status for ${from}`);
      } catch (logErr) {
        console.error('‚ùå Failed to update LoanReplyLog Aadhaar verification status:', logErr);
      }
    }
    
    // Send Aadhaar verification confirmation
    const confirmationText = `‚úÖ *Aadhaar Verification Successful!*\n\nüéâ Your Aadhaar verification has been registered successfully!\n\nüìÖ Verified on: ${new Date().toLocaleDateString('en-IN')}\n‚è∞ Time: ${new Date().toLocaleTimeString('en-IN')}\n\n‚úÖ Status: *VERIFIED*\n\nThank you for completing the verification process! üôè\n\n‡§Ü‡§™‡§ï‡§æ ‡§Ü‡§ß‡§æ‡§∞ ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§® ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§™‡§Ç‡§ú‡•Ä‡§ï‡•É‡§§ ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à! ‚úÖ`;
    
    await sendTextMessage(from, confirmationText);
    
    // Save the confirmation message to database
    await Message.create({
      from: process.env.META_PHONE_NUMBER_ID,
      to: from,
      body: confirmationText,
      direction: 'outbound',
      timestamp: new Date(),
      meta: {
        type: 'aadhaar_verification_confirmation',
        vendorPhone: from,
        verificationDate: new Date()
      }
    });
    
  } catch (err) {
    console.error('‚ùå Error handling verification conversation:', err);
  }
}

async function handleOnboardingConversation(from: string, text: string) {
  console.log('üöÄ Handling onboarding conversation');
  
  // Send welcome message for onboarding
  await sendTemplateMessage(from, 'welcome_message_for_onboarding');
  
  // Save the outbound message to database
  await Message.create({
    from: process.env.META_PHONE_NUMBER_ID,
    to: from,
    body: "Welcome to Laari Khojo! We're excited to have you on board.",
    direction: 'outbound',
    timestamp: new Date(),
    meta: {
      type: 'onboarding_welcome',
      template: 'welcome_message_for_onboarding'
    }
  });
}

async function handleGreetingConversation(from: string) {
  console.log('üëã Handling greeting conversation');
  
  // Check if we've already sent a greeting response recently
  const thirtySecondsAgo = new Date(Date.now() - 30 * 1000);
  const existingGreetingResponse = await Message.findOne({
    from: process.env.META_PHONE_NUMBER_ID,
    to: from,
    direction: 'outbound',
    body: { $regex: /Namaste from Laari Khojo/ },
    timestamp: { $gte: thirtySecondsAgo }
  });
  
  if (existingGreetingResponse) {
    console.log('‚ö†Ô∏è Greeting response already sent recently, skipping duplicate');
    return;
  }
  
  // Send default hi and loan prompt template
  await sendTemplateMessage(from, 'default_hi_and_loan_prompt');
  
  // Save the outbound message to database
  await Message.create({
    from: process.env.META_PHONE_NUMBER_ID,
    to: from,
    body: "üëã Namaste from Laari Khojo!\nüôè ‡§≤‡§æ‡§∞‡•Ä ‡§ñ‡•ã‡§ú‡•ã ‡§ï‡•Ä ‡§ì‡§∞ ‡§∏‡•á ‡§®‡§Æ‡§∏‡•ç‡§§‡•á!\n\nüì© Thanks for reaching out!\nüìû ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!\n\nWe help you get discovered by more customers by showing your updates and services on our platform.\nüß∫ ‡§π‡§Æ ‡§Ü‡§™‡§ï‡•á ‡§Ö‡§™‡§°‡•á‡§ü‡•ç‡§∏ ‡§î‡§∞ ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§Ö‡§™‡§®‡•á ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡•â‡§∞‡•ç‡§Æ ‡§™‡§∞ ‡§¶‡§ø‡§ñ‡§æ‡§ï‡§∞ ‡§Ü‡§™‡§ï‡•ã ‡§ú‡§º‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï‡•ã‡§Ç ‡§§‡§ï ‡§™‡§π‡•Å‡§Å‡§ö‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§\n\nüí∞ Interested in future loan support?\nJust reply with: *loan*\n‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§Æ‡•á‡§Ç ‡§≤‡•ã‡§® ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ö‡§æ‡§π‡§ø‡§è?\n‚û°Ô∏è ‡§ú‡§µ‡§æ‡§¨ ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú‡•á‡§Ç: *loan*",
    direction: 'outbound',
    timestamp: new Date(),
    meta: {
      type: 'greeting_response',
      template: 'default_hi_and_loan_prompt'
    }
  });
}

async function handleAadhaarVerificationButton(from: string) {
  console.log('‚úÖ Handling Aadhaar verification button');
  
  try {
    const userNumbers = [from];
    if (from.startsWith('+91')) userNumbers.push(from.replace('+91', '91'));
    if (from.startsWith('+')) userNumbers.push(from.substring(1));
    userNumbers.push(from.slice(-10));
    
    // Find user/vendor
    const user = await User.findOne({ contactNumber: { $in: userNumbers } });
    if (user) {
      // Update Aadhaar verification status
      (user as any).aadharVerified = true;
      (user as any).aadharVerificationDate = new Date();
      await user.save();
      console.log(`‚úÖ Updated Aadhaar verification status for ${user.name} (${from}) via button click`);
      
      // Update LoanReplyLog entry to show Aadhaar verification
      try {
        const LoanReplyLogModel = (await import('../models/LoanReplyLog.js')).default;
        await LoanReplyLogModel.findOneAndUpdate(
          { contactNumber: from },
          { aadharVerified: true },
          { new: true }
        );
        console.log(`‚úÖ Updated LoanReplyLog Aadhaar verification status for ${from}`);
      } catch (logErr) {
        console.error('‚ùå Failed to update LoanReplyLog Aadhaar verification status:', logErr);
      }
    }
    
    // Send visual confirmation message with tick mark
    const visualConfirmationText = `‚úÖ *Aadhaar Verification Successful!*\n\nüéâ Your Aadhaar verification has been registered successfully!\n\nüìÖ Verified on: ${new Date().toLocaleDateString('en-IN')}\n‚è∞ Time: ${new Date().toLocaleTimeString('en-IN')}\n\n‚úÖ Status: *VERIFIED*\n\nThank you for completing the verification process! üôè\n\n‡§Ü‡§™‡§ï‡§æ ‡§Ü‡§ß‡§æ‡§∞ ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§® ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§™‡§Ç‡§ú‡•Ä‡§ï‡•É‡§§ ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à! ‚úÖ`;
    
    await sendTextMessage(from, visualConfirmationText);
    
    // Save the visual confirmation message to database
    await Message.create({
      from: process.env.META_PHONE_NUMBER_ID,
      to: from,
      body: visualConfirmationText,
      direction: 'outbound',
      timestamp: new Date(),
      meta: {
        type: 'aadhaar_verification_button_confirmation',
        vendorPhone: from,
        verificationDate: new Date(),
        trigger: 'button_click'
      }
    });
    
  } catch (err) {
    console.error('‚ùå Error handling Aadhaar verification button:', err);
  }
}

async function handleSupportRequestButton(from: string) {
  console.log('üìû Handling support request button');
  
  try {
    // Find vendor details
    const userNumbers = [from];
    if (from.startsWith('+91')) userNumbers.push(from.replace('+91', '91'));
    if (from.startsWith('+')) userNumbers.push(from.substring(1));
    userNumbers.push(from.slice(-10));
    
    const vendor = await User.findOne({ contactNumber: { $in: userNumbers } });
    const vendorName = vendor ? vendor.name : 'Unknown Vendor';
    
    // Create support call log entry
    const SupportCallLog = (await import('../models/SupportCallLog.js')).default;
    await SupportCallLog.create({
      vendorName: vendorName,
      contactNumber: from,
      timestamp: new Date(),
      completed: false
    });
    
    console.log(`‚úÖ Created support call log for ${vendorName} (${from})`);
    
    // Send confirmation message
    await sendTemplateMessage(from, 'inactive_vendors_reply_to_yes_support_call');
    
    // Save the confirmation message to database
    await Message.create({
      from: process.env.META_PHONE_NUMBER_ID,
      to: from,
      body: "‚úÖ Support request received! Our team will contact you soon.",
      direction: 'outbound',
      timestamp: new Date(),
      meta: {
        type: 'support_confirmation',
        vendorName: vendorName,
        contactNumber: from
      }
    });
    
  } catch (err) {
    console.error('‚ùå Error handling support request:', err);
  }
}

async function sendLocationConfirmation(from: string) {
  try {
    const confirmationText = "‚úÖ Location updated successfully! Thank you for sharing your location.";
    await sendTextMessage(from, confirmationText);
    
    await Message.create({
      from: process.env.META_PHONE_NUMBER_ID,
      to: from,
      body: confirmationText,
      direction: 'outbound',
      timestamp: new Date(),
      meta: {
        type: 'location_confirmation'
      }
    });
  } catch (error) {
    console.error('‚ùå Failed to send location confirmation:', error);
  }
}

export default router;
